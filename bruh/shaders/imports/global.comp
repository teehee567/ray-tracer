#define PI         3.14159265358979323
#define INV_PI     0.31830988618379067
#define TWO_PI     6.28318530717958648
#define INV_TWO_PI 0.15915494309189533
#define INV_4_PI   0.07957747154594766
#define EPS 0.001
#define INF 1000000.0

#define QUAD_LIGHT 0
#define SPHERE_LIGHT 1
#define DISTANT_LIGHT 2

#define LIGHTS
//#define RR
#define RR_DEPTH 2

struct Material {
    vec4 base_color;
    vec4 emission;
    float metallic;
    float roughness;
    float subsurface;
    float anisotropic;
    float specular_tint;
    float sheen;
    float sheen_tint;
    float clearcoat;
    float clearcoat_roughness;
    float spec_trans;
    float ior;

    bool shaded_smooth;

    uint base_color_tex;
    uint metallic_roughness_tex;
    uint normal_tex;
    uint emission_tex;
};

struct Triangle {
    uint material_idx;
    bool is_sphere;
    vec3[3] vertices;
    vec3[3] normals;
    vec2 uvs[3];
};

struct HitRecord {
    float eta;
    float hit_dist;

    vec3 pos;
    vec3 normal;
    vec3 ffnormal;
    vec3 tangent;
    vec3 bitangent;

    vec2 uv;
    Material material;

    bool did_hit;
    bool is_exiting;
    Triangle triangle;
};

struct Light
{
    vec3 position;
    vec3 emission;
    vec3 u;
    vec3 v;
    float radius;
    float area;
    int type;
};


#define NUM_LIGHTS 1
Light lights[NUM_LIGHTS];

void initLights() {

    for(int i = 0; i < NUM_LIGHTS; i +=1) {
        float f = float(i) * 10;
        
        vec3 p = vec3(0., 15., 0.);
  
        vec3 u = vec3(80., 5., 80) - p;
        vec3 v = vec3(-80., 5., 80) - p;
        

        float area = length(cross(u, v));
        
        lights[i] = Light( p,         // Position
                           vec3(20),   // Emission
                           u,         // u, only for rect lights
                           v,         // v, only for rect lights
                           0.,        // Radius for sphere light, 
                           area,      // area  
                           0);        // type: 0 - rect, 1 - sphere, 2 - dist
    
    }
}

// Get the camera position and lookAt
void getCameraPos(inout vec3 origin, inout vec3 lookAt) {
    origin = vec3(15., 15, 0.);
    lookAt = vec3(0., 0., 0.);
}

// Get the scene background color
vec3 getBackground(Ray ray) {
    //float blend = 0.5 * ray.direction.y + 0.5;
    //return mix(vec3(0.6, 0.8, 1.0), vec3(0.2, 0.4, 1.0), blend);
    return vec3(1);

}

// Map

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

vec2 opU(vec2 o1, vec2 o2) {
    return (o1.x < o2.x) ? o1 : o2;
}

