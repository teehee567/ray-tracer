#version 460

#define SAMPLES 8
#define BOUNCES 12
#define EPSILON 0.0001
#define MAX_BVH_DEPTH 64
#define AMBIENT_COLOR vec3(0.1, 0.1, 0.1)
#define AMBIENT_INTENSITY 0.1
#define INFINITY 10000000.

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_NV_compute_shader_derivatives: enable


#include "imports/ray.comp"
#include "imports/global.comp"
#include "imports/random.comp"
#include "imports/disney.comp"

/* AABB node of the BVH tree */
struct BvhNode {
    vec3 min;
    uint idx;
    vec3 max;
    uint amt;
};


// perf: these triangles are pretty huge.
// Since if not shaded smooth the normals are ignored, then they can be used to 
// store 2 triangle per triangle...
// Or maybe just remove the normals altogether


layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// todo: look into inline uniform buffers for speed and small data
layout(std430, set = 0, binding = 0) uniform Camera {
    uvec2 resolution;
    vec2 uv;
    float focal_len;
    float focus_distance;
    float aperture_radius;
    uint frame;
    vec4 origin;
    mat4 rotation;
} camera;

layout(std430, set = 0, binding = 1) readonly buffer BvhBuffer {
    BvhNode nodes[];
} bvh;

layout(std430, set = 0, binding = 2) readonly buffer MaterialBuffer {
    Material get[]; // this makes the syntax a bit more readable: materials.get[3]
} materials;

layout(std430, set = 0, binding = 3) readonly buffer TriangleBuffer {
    Triangle get[];
} triangles;

layout(set = 0, binding = 4, rgba8) uniform image2D accumulator;
layout(set = 0, binding = 5) writeonly uniform image2D framebuffer;
layout(set = 0, binding = 6) uniform sampler2D textures[];

#include "imports/generate_ray.comp"
#include "imports/intersects.comp"

vec3 background_color(Ray ray) {
    //float blend = 0.5 * ray.direction.y + 0.5;
    //return mix(vec3(0.6, 0.8, 1.0), vec3(0.2, 0.4, 1.0), blend);
    return vec3(0.6);
}

vec3 calculate_surface_normal(HitRecord hit, Triangle triangle) {
    if (hit.material.normal_tex == 0xFFFFFFFF) {
        return hit.normal;
    }

    // Calculate tangent space
    vec3 dp1 = triangle.vertices[1] - triangle.vertices[0];
    vec3 dp2 = triangle.vertices[2] - triangle.vertices[0];
    vec2 duv1 = triangle.uvs[1] - triangle.uvs[0];
    vec2 duv2 = triangle.uvs[2] - triangle.uvs[0];
    
    float inv_det = 1.0 / (duv1.x * duv2.y - duv1.y * duv2.x);
    vec3 tangent = normalize((dp1 * duv2.y - dp2 * duv1.y) * inv_det);
    vec3 bitangent = normalize((dp2 * duv1.x - dp1 * duv2.x) * inv_det);
    
    // Build TBN matrix
    mat3 TBN = mat3(tangent, bitangent, hit.normal);
    
    // Sample and decode normal map
    vec3 normal_map = texture(textures[nonuniformEXT(hit.material.normal_tex)], hit.uv).rgb;
    normal_map = normal_map * 2.0 - 1.0; // Convert from [0,1] to [-1,1]
    
    return normalize(TBN * normal_map);
}

vec3 ray_color(Ray ray, inout uint mesh_tests) {
    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    LightSampleRec lightSampleRec;
    BsdfSampleRec bsdfSampleRec;

    initLights();
    numOfLights = NUM_LIGHTS;
    
    for(int bounce = 0; bounce < BOUNCES; bounce++) {
        HitRecord hit = hit_meshes(ray, mesh_tests);
        
        if(!hit.did_hit) {
            radiance += getBackground(ray) * throughput;
            break;
        }
            if (hit.material.base_color_tex != 0xFFFFFFFF) {
                hit.material.base_color *= texture(textures[hit.material.base_color_tex], hit.uv);
            }
            
            if (hit.material.metallic_roughness_tex != 0xFFFFFFFF) {
                vec4 metallic_roughness = texture(textures[hit.material.metallic_roughness_tex], hit.uv);
                hit.material.metallic *= metallic_roughness.b;
                hit.material.roughness *= metallic_roughness.g;
            }
            
            if (hit.material.emission_tex != 0xFFFFFFFF) {
                hit.material.emission *= texture(textures[hit.material.emission_tex], hit.uv);
            }
            
            if (hit.material.normal_tex != 0xFFFFFFFF) {
                vec3 texNormal = texture(textures[hit.material.normal_tex], hit.uv).xyz * 2.0 - 1.0;
                mat3 TBN = mat3(hit.tangent, hit.bitangent, hit.normal);
                hit.normal = normalize(TBN * texNormal);
            }

            hit.ffnormal = dot(hit.normal, ray.direction) <= 0.0 ? hit.normal : -hit.normal;
            Onb(hit.normal, hit.tangent, hit.bitangent);
            hit.material.roughness = max(hit.material.roughness, 0.001);
            hit.eta = dot(hit.normal, hit.ffnormal) > 0.0 ? (1.0 / hit.material.ior) : hit.material.ior;

        radiance += hit.material.emission.xyz * throughput;

        //vec3 surface_normal = calculate_surface_normal(hit, hit.triangle);

        if (any(greaterThan(hit.material.emission.xyz, vec3(EPSILON)))) {
            radiance += EmitterSample(ray, bounce, lightSampleRec, bsdfSampleRec) * throughput;
            break;
        }

        if (dot(hit.normal, hit.ffnormal) < 0.0 && hit.material.spec_trans > 0.0) {
            throughput *= exp(-log(hit.material.base_color.rgb) * hit.hit_dist);
        }

        radiance += DirectLight(ray, hit) * throughput;

        bsdfSampleRec.f = DisneySample(hit, -ray.direction, hit.ffnormal, bsdfSampleRec.L, bsdfSampleRec.pdf);

        if (bsdfSampleRec.pdf > 0.0) {
            throughput *= bsdfSampleRec.f / bsdfSampleRec.pdf;
        } else {
            break;
        }
        
        // Russian Roulette
        if(bounce > 2) {
            float p = max(0.05, max(throughput.r, max(throughput.g, throughput.b)));
            if(pgc_random(seed) > p) {
                break;
            }
            throughput /= p;
        }
        ray.direction = bsdfSampleRec.L;
        ray.origin = hit.pos + ray.direction * EPSILON;
    }
    
    return radiance;
}

// ACES tone mapping curve fit
// Source: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
vec3 aces_film(vec3 x) {
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

// Alternative tone mapping operator (Reinhard)
vec3 reinhard(vec3 x) {
    return x / (1.0 + x);
}
vec3 rgb_to_hsv(vec3 rgb) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));
    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));
    
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 hsv_to_rgb(vec3 hsv) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);
    return hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);
}

// Adjusts saturation using HSV
vec3 adjust_saturation(vec3 color, float saturation) {
    vec3 hsv = rgb_to_hsv(color);
    hsv.y *= saturation;  // Multiply saturation
    return hsv_to_rgb(hsv);
}

// Extended Reinhard tone mapping with white point
vec3 reinhard_extended(vec3 x, float white_point) {
    vec3 numerator = x * (1.0 + (x / (white_point * white_point)));
    return numerator / (1.0 + x);
}

vec4 gamma_correction(vec4 color) {
    // Apply tone mapping first
    vec3 tone_mapped = aces_film(color.rgb);

    float saturation = 1.5;  // Adjust this value (1.0 is normal, >1.0 increases saturation)
    tone_mapped = adjust_saturation(tone_mapped, saturation);
    
    // Then apply gamma correction
    vec3 gamma_corrected = pow(tone_mapped, vec3(1.0/2.2));
    
    return vec4(gamma_corrected, color.a);
}

void main() {
    ivec2 coordinates = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);

    if (coordinates.x < size.x && coordinates.y < size.y) {
        seed = uint(coordinates.x + camera.resolution.x * coordinates.y + camera.frame * coordinates.y * coordinates.x);
        uint mesh_tests = 0;
        vec3 color = vec3(0);
        for (int i = 0; i < SAMPLES; i++) {
            Ray ray = generate_ray(coordinates.xy);

            color += ray_color(ray, mesh_tests) / float(SAMPLES);
        }

        //color = clamp(color, vec3(0), vec3(1));

        vec4 old_pixel = imageLoad(accumulator, coordinates);
        vec4 new_pixel = old_pixel * camera.frame / (camera.frame + 1) + vec4(color, 1.0) / (camera.frame + 1);

        imageStore(accumulator, coordinates, new_pixel);
        imageStore(framebuffer, coordinates, gamma_correction(new_pixel));

        // visualize triangle tests
        //float tests = float(mesh_tests) / 3000.0f;
        //imageStore(framebuffer, coordinates, gamma_correction(vec4(tests <= 1.0f ? vec3(tests) : vec3(1,0,0), 1.0)));

        //imageStore(framebuffer, coordinates, gamma_correction(vec4(color, 1.0)));
        //imageStore(framebuffer, coordinates, gamma_correction(vec4(triangle_sbo.triangles[0].first, 1.0)));
    }
}
